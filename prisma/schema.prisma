datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Your model definitions go here

model Companies {
  id            String   @id @default(cuid())
  name          String   @default("")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  city          String?  @default("")
  country       String?  @default("")
  employeeIds   String[] @default([])
  isEvaluation  Boolean  @default(false)
  websiteUrl    String?  @default("")
  customers     Customers[]
  projects Projects[]  // Add this line
  logs        Logs[]
}

model Customers {
  id              String   @id @default(cuid())
  companyId       String?  @default("")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  email           String   @default("")
  name            String   @default("")
  status          String   @default("Pending") // delete this
  company         Companies? @relation(fields: [companyId], references: [id])
  notes           Notes[]
}

model Notes {
  id                 String   @id @default(cuid())
  body               String   @default("")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  contact_method     String   @default("")
  relatedCustomers   Customers[]
}

model Projects {
  id          String   @id @default(cuid())
  name        String
  description String?
  companyId   String
  company     Companies @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tasks       Tasks[]
  logs        Logs[]
}

model Tasks {
  id          String   @id @default(cuid())
  name        String
  description String?
  projectId   String
  project     Projects @relation(fields: [projectId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  logs        Logs[]
}

model Logs {
  id          String   @id @default(cuid())
  elapsedTime Int      // Storing time in seconds
  projectId   String
  project     Projects @relation(fields: [projectId], references: [id])
  companyId   String
  company     Companies @relation(fields: [companyId], references: [id])
  taskId      String
  task        Tasks @relation(fields: [taskId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

